---
- name: detect cib.xml
  stat:
    path: "{{ pgsql_pacemaker_config_path }}"
  register: cib_file

- block:
  - name: detect default gateway
    shell: ip -4 route | grep default | awk '{print $3}'
    register: default_gateway
    changed_when: false
    when: pgsql_pacemaker_ping_target_hosts is undefined

  - name: set pingcheck target hosts as facts
    set_fact:
      pgsql_pacemaker_ping_target_hosts: "{{ default_gateway.stdout }}"
    when: default_gateway.stdout

  - name: save cib
    shell: |
      pcs cluster cib {{ pgsql_pacemaker_config_path }}

  - name: setup propertis
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} property set no-quorum-policy="ignore" && \
      pcs -f {{ pgsql_pacemaker_config_path }} property set stonith-enabled="false"

  - name: create vipcheck resource
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} resource create vipcheck ocf:heartbeat:VIPcheck \
        target_ip={{ pgsql_pacemaker_cluster_info.master.virtual_ipaddr }} count=1 wait=10 --group master-group

  - name: create master-vip resource
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} resource create master-vip ocf:heartbeat:IPaddr2 \
        ip={{ pgsql_pacemaker_cluster_info.master.virtual_ipaddr }} iflabel=master op monitor interval=5s --group master-group

  - name: create dbsync-vip resource
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} resource create dbsync-vip ocf:heartbeat:IPaddr2 \
        ip={{ pgsql_pacemaker_cluster_info.dbsync.virtual_ipaddr }} iflabel=master op monitor interval=5s --group master-group
    when: pgsql_pacemaker_cluster_info.dbsync.virtual_ipaddr is defined

  - name: create replica-vip resource
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} resource create replica-vip ocf:heartbeat:IPaddr2 \
        ip={{ pgsql_pacemaker_cluster_info.replica.virtual_ipaddr }} iflabel=replica op monitor interval=5s
    when: pgsql_pacemaker_cluster_info.replica.virtual_ipaddr is defined

  - name: create pingcheck resource
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} resource create ping ocf:pacemaker:ping \
        dampen=5s multiplier=100 host_list={{ pgsql_pacemaker_ping_target_hosts }} --clone
    when: pgsql_pacemaker_ping_target_hosts is defined

  - name: create pgsql-master resource
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} resource create pgsql ocf:heartbeat:pgsql \
        pgctl="/usr/pgsql-{{ PGSQL_VERSION }}/bin/pg_ctl" \
        pgdata="{{ pgsql_data_dir }}" \
        psql="/usr/pgsql-{{ PGSQL_VERSION }}/bin/psql" \
        pgport="{{ pgsql_listen_port }}" \
        config="{{ pgsql_data_dir }}/postgresql.conf" \
        stop_escalate="5" \
        rep_mode="sync" \
        node_list="{{ ansible_play_hosts | join(' ') }}" \
        {% if pgsql_pacemaker_cluster_info.dbsync.virtual_ipaddr is defined %}
        restore_command="scp {{ pgsql_pacemaker_cluster_info.dbsync.virtual_ipaddr }}:{{ pgsql_archive_dir }}/%f %p" \
        master_ip="{{ pgsql_pacemaker_cluster_info.dbsync.virtual_ipaddr }}" \
        {% else %}
        restore_command="scp {{ pgsql_pacemaker_cluster_info.master.virtual_ipaddr }}:{{ pgsql_archive_dir }}/%f %p" \
        master_ip="{{ pgsql_pacemaker_cluster_info.master.virtual_ipaddr }}" \
        {% endif %}
        archive_cleanup_command="/usr/pgsql-{{ PGSQL_VERSION }}/bin/pg_archivecleanup {{ pgsql_archive_dir }} %r" \
        primary_conninfo_opt="keepalives_idle=60 keepalives_interval=5 keepalives_count=5" \
        repuser="{{ pgsql_replication_user }}" \
        restart_on_promote="true" \
        tmpdir="/var/run/postgresql" \
        op monitor interval="11s" op monitor interval="10s" role="Master" \
        master master-max=1 master-node-max=1 clone-max=3 clone-node-max=1 notify=true target-role='Started' \
        logfile="{{ pgsql_data_dir }}/startup.log"

  - name: setup pgsql-master constraints
    shell: |
      {% if pgsql_pacemaker_ping_target_hosts is defined %}
      pcs -f {{ pgsql_pacemaker_config_path }} constraint location pgsql-master rule score=-INFINITY pingd lt 1 or not_defined pingd && \
      {% endif %}
      pcs -f {{ pgsql_pacemaker_config_path }} constraint colocation add master-group with master pgsql-master INFINITY && \
      pcs -f {{ pgsql_pacemaker_config_path }} constraint order start master-group then promote pgsql-master symmetrical=false score=INFINITY && \
      pcs -f {{ pgsql_pacemaker_config_path }} constraint order demote pgsql-master then stop master-group symmetrical=false score=0

  - name: setup replica-vip constraints
    shell: |
      pcs -f {{ pgsql_pacemaker_config_path }} constraint location replica-vip rule score=200 pgsql-status eq HS:sync && \
      pcs -f {{ pgsql_pacemaker_config_path }} constraint location replica-vip rule score=100 pgsql-status eq PRI && \
      pcs -f {{ pgsql_pacemaker_config_path }} constraint location replica-vip rule score=-INFINITY not_defined pgsql-status && \
      pcs -f {{ pgsql_pacemaker_config_path }} constraint location replica-vip rule score=-INFINITY pgsql-status ne HS:sync and pgsql-status ne PRI
    when: pgsql_pacemaker_cluster_info.replica.virtual_ipaddr is defined

  - name: push cib
    shell: |
      pcs cluster cib-push {{ pgsql_pacemaker_config_path }}

  run_once: true
  delegate_to: "{{ pgsql_replication_master }}"
  when: not cib_file.stat.exists
