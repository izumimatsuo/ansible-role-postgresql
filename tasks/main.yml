---
- name: install postgresql repository
  yum:
    name: "{{ PG_PACKAGE_RPM }}"
  tags: postgresql

- name: install postgresql {{ PG_VERSION }} package
  yum:
    name:
      - "{{ PG_PACKAGE_BASE }}-server"
      - "{{ PG_PACKAGE_BASE }}-devel"
      - "{{ PG_PACKAGE_BASE }}-contrib"
  tags: postgresql

- name: detect database cluster
  stat:
    path: "/var/lib/pgsql/{{ PG_VERSION }}/data/PG_VERSION"
  register: dbcluster
  tags: postgresql

- name: setup database cluster
  command: "/usr/pgsql-{{ PG_VERSION }}/bin/{{ PG_PACKAGE_BASE }}-setup initdb"
  when: not dbcluster.stat.exists
  tags: postgresql

- name: copy postgresql conf
  template:
    src: postgresql.conf.j2
    dest: "/var/lib/pgsql/{{ PG_VERSION }}/data/postgresql.conf"
    owner: postgres
    group: postgres
    mode: '0600'
  notify: restart postgresql service
  tags: postgresql

- name: start postgresql service
  service:
      name: "postgresql-{{ PG_VERSION }}"
      state: started
      enabled: yes
  tags: postgresql
  when: not dbcluster.stat.exists

- name: create role
  become: yes
  become_user: postgres
  command: psql -c "CREATE ROLE {{ pg_user }} LOGIN PASSWORD '{{ pg_passwd }}';"
  when: not dbcluster.stat.exists
  tags: postgresql

- name: create database
  become: yes
  become_user: postgres
  command: psql -c "CREATE DATABASE {{ pg_database }};"
  when: not dbcluster.stat.exists
  tags: postgresql

- name: set pg_hba conf
  lineinfile:
    path: '/var/lib/pgsql/{{ PG_VERSION }}/data/pg_hba.conf'
    regexp: '^host {{ pg_database }} {{ pg_user }} all md5$'
    line: 'host {{ pg_database }} {{ pg_user }} all md5'
  notify: restart postgresql service
  tags: postgresql

- include_tasks: replication.yml
  when: pg_enable_replication and not dbcluster.stat.exists
  tags: postgresql

- include_tasks: keepalived.yml
  when:
    - pg_enable_replication and not dbcluster.stat.exists
    - pg_use_keepalived
  tags: postgresql
