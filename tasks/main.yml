---
- name: install postgresql repository
  yum:
    name: "{{ PGSQL_PACKAGE_RPM }}"

- name: install postgresql {{ PGSQL_VERSION }} package
  yum:
    name:
      - "{{ PGSQL_PACKAGE_BASE }}-server"
      - "{{ PGSQL_PACKAGE_BASE }}-devel"
      - "{{ PGSQL_PACKAGE_BASE }}-contrib"

- name: set postgres database base directory as facts
  set_fact:
    pgsql_base_dir: "/var/lib/pgsql/{{ PGSQL_VERSION }}"
  when: pgsql_base_dir is undefined

- name: set postgres database directories as facts
  set_fact:
    pgsql_data_dir: "{{ pgsql_base_dir }}/data"
    pgsql_archive_dir: "{{ pgsql_base_dir }}/archive"
    pgsql_backup_dir: "{{ pgsql_base_dir }}/backups"

- name: create postgres database directories
  file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  with_items:
    - "{{ pgsql_base_dir }}"
    - "{{ pgsql_data_dir }}"
    - "{{ pgsql_archive_dir }}"
    - "{{ pgsql_backup_dir }}"

- name: set dot passwd file
  lineinfile:
    path: '/var/lib/pgsql/.pgpass'
    create: yes
    line: '*:*:*:{{ pgsql_replication_user }}:{{ pgsql_replication_passwd }}'
    owner: postgres
    group: postgres
    mode: '0600'

- block:
  - name: detect database cluster
    stat:
      path: "{{ pgsql_data_dir }}/PG_VERSION"
    register: dbcluster

  - name: setup database cluster
    become: yes
    become_user: postgres
    command: "/usr/pgsql-{{ PGSQL_VERSION }}/bin/initdb -E UTF8 --locale=C -D {{ pgsql_data_dir }}"
    when: not dbcluster.stat.exists

  - name: set postgresql.conf
    blockinfile:
      path: "{{ pgsql_data_dir }}/postgresql.conf"
      backup: true
      block: |
        listen_addresses = '*'
        port = {{ pgsql_listen_port }}
        wal_level = replica
        archive_mode = on
        archive_command = 'cp %p {{ pgsql_archive_dir }}/%f'
        max_wal_senders = 2
        hot_standby = on
      owner: postgres
      group: postgres
      mode: '0600'
    notify: restart postgresql service

  - name: copy pg_hba conf
    template:
      src: pg_hba.conf.j2 
      dest: '{{ pgsql_data_dir }}/pg_hba.conf'
      owner: postgres
      group: postgres
      mode: '0600'
    notify: restart postgresql service

  - name: start postgresql service
    service:
      name: "postgresql-{{ PGSQL_VERSION }}"
      state: started
      enabled: yes
    when: not dbcluster.stat.exists
 
  - name: create role
    become: yes
    become_user: postgres
    command: psql -c "CREATE ROLE {{ pgsql_user }} LOGIN PASSWORD '{{ pgsql_passwd }}';"
    when: not dbcluster.stat.exists

  - name: create database
    become: yes
    become_user: postgres
    command: psql -c "CREATE DATABASE {{ pgsql_database }};"
    when: not dbcluster.stat.exists

  - name: create replication user # noqa 301
    become: yes
    become_user: postgres
    command: psql -c "CREATE ROLE {{ pgsql_replication_user }} LOGIN REPLICATION PASSWORD '{{ pgsql_replication_passwd }}';"
    when: not dbcluster.stat.exists and pgsql_cluster_hostnames != None

  when: pgsql_cluster_hostnames == None or inventory_hostname == pgsql_cluster_hostnames[0]

- block:
  - name: detect database cluster (standby)
    stat:
      path: "{{ pgsql_data_dir }}/PG_VERSION"
    register: dbcluster

  - name: setup database cluster (standby)
    become: yes
    become_user: postgres
    command: "/usr/pgsql-{{ PGSQL_VERSION }}/bin/pg_basebackup -x -h {{ hostvars[pgsql_cluster_hostnames[0]].ansible_host }} -p {{ pgsql_listen_port }} -U {{ pgsql_replication_user }} -D {{ pgsql_data_dir }} -P -R"
    when: not dbcluster.stat.exists

  - name: start postgresql service (standby)
    service:
      name: "postgresql-{{ PGSQL_VERSION }}"
      state: started
      enabled: yes
    when: not dbcluster.stat.exists

  when: pgsql_cluster_hostnames != None and inventory_hostname != pgsql_cluster_hostnames[0]

- block:
  - name: stop postgresql service
    service:
      name: "postgresql-{{ PGSQL_VERSION }}"
      state: stopped

  - include_tasks: pacemaker.yml

  when: pgsql_cluster_hostnames != None and pacemaker_cluster_info != None
