---
- name: install postgresql repository
  yum:
    name: "{{ PGSQL_PACKAGE_RPM }}"

- name: install postgresql {{ PGSQL_VERSION }} package
  yum:
    name:
      - "{{ PGSQL_PACKAGE_BASE }}-server"
      - "{{ PGSQL_PACKAGE_BASE }}-devel"
      - "{{ PGSQL_PACKAGE_BASE }}-contrib"

- name: set postgres database base directory as facts
  set_fact:
    pgsql_base_dir: "/var/lib/pgsql/{{ PGSQL_VERSION }}"
  when: pgsql_base_dir is undefined

- name: set postgres database directories as facts
  set_fact:
    pgsql_data_dir: "{{ pgsql_base_dir }}/data"
    pgsql_archive_dir: "{{ pgsql_base_dir }}/archive"
    pgsql_backup_dir: "{{ pgsql_base_dir }}/backups"

- name: create postgres database directories
  file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  with_items:
    - "{{ pgsql_base_dir }}"
    - "{{ pgsql_data_dir }}"
    - "{{ pgsql_archive_dir }}"
    - "{{ pgsql_backup_dir }}"

- name: set dot passwd file
  lineinfile:
    path: '/var/lib/pgsql/.pgpass'
    create: yes
    line: '*:*:*:{{ pgsql_replication_user }}:{{ pgsql_replication_passwd }}'
    owner: postgres
    group: postgres
    mode: '0600'

- name: set postgres replication master
  set_fact:
    pgsql_replication_master: "{{ ansible_play_hosts[0] }}"
  when: ansible_play_hosts | length > 1

- include_tasks: ssh_peer.yml
  when: pgsql_replication_master is defined 

- block:
  - name: detect database cluster {{ '(master)' if pgsql_replication_master is defined }}
    stat:
      path: "{{ pgsql_data_dir }}/PG_VERSION"
    register: dbcluster

  - name: setup database cluster {{ '(master)' if pgsql_replication_master is defined }}
    become: yes
    become_user: postgres
    command: "/usr/pgsql-{{ PGSQL_VERSION }}/bin/initdb -E UTF8 --locale=C -D {{ pgsql_data_dir }}"
    when: not dbcluster.stat.exists

  - name: set postgresql.conf {{ '(master)' if pgsql_replication_master is defined }}
    blockinfile:
      path: "{{ pgsql_data_dir }}/postgresql.conf"
      backup: true
      block: |
        listen_addresses = '*'
        port = {{ pgsql_listen_port }}
        wal_level = replica
        archive_mode = on
        archive_command = '/bin/cp %p {{ pgsql_archive_dir }}/%f'
        max_wal_senders = 4
        wal_keep_segments = 32
        hot_standby = on
        max_standby_streaming_delay = -1
        max_standby_archive_delay = -1
        archive_mode = on
        synchronous_commit = on
        restart_after_crash = off
        wal_sender_timeout = 20s
        wal_receiver_status_interval = 5s
        hot_standby_feedback = on
      owner: postgres
      group: postgres
      mode: '0600'
    notify: restart postgresql service

  - name: copy pg_hba conf {{ '(master)' if pgsql_replication_master is defined }}
    template:
      src: pg_hba.conf.j2 
      dest: '{{ pgsql_data_dir }}/pg_hba.conf'
      owner: postgres
      group: postgres
      mode: '0600'
    notify: restart postgresql service

  - name: start postgresql service {{ '(master)' if pgsql_replication_master is defined }}
    service:
      name: "postgresql-{{ PGSQL_VERSION }}"
      state: started
      enabled: no
    when: not dbcluster.stat.exists
 
  - name: create role {{ '(master)' if pgsql_replication_master is defined }}
    become: yes
    become_user: postgres
    command: psql -c "CREATE ROLE {{ pgsql_user }} LOGIN PASSWORD '{{ pgsql_user_passwd }}';"
    when: not dbcluster.stat.exists

  - name: create database {{ '(master)' if pgsql_replication_master is defined }}
    become: yes
    become_user: postgres
    command: psql -c "CREATE DATABASE {{ pgsql_database_name }};"
    when: not dbcluster.stat.exists

  - name: create replication user {{ '(master)' if pgsql_replication_master is defined }} # noqa 301
    become: yes
    become_user: postgres
    command: psql -c "CREATE ROLE {{ pgsql_replication_user }} LOGIN REPLICATION PASSWORD '{{ pgsql_replication_passwd }}';"
    when: not dbcluster.stat.exists

  when: pgsql_replication_master is undefined or inventory_hostname == pgsql_replication_master

- block:
  - name: detect database cluster (standby)
    stat:
      path: "{{ pgsql_data_dir }}/PG_VERSION"
    register: dbcluster

  - name: setup database cluster (standby)
    become: yes
    become_user: postgres
    command: "/usr/pgsql-{{ PGSQL_VERSION }}/bin/pg_basebackup -x -h {{ hostvars[pgsql_replication_hosts[0]].ansible_host if hostvars[pgsql_replication_hosts[0]] is defined else pgsql_replication_hosts[0] }} -p {{ pgsql_listen_port }} -U {{ pgsql_replication_user }} -D {{ pgsql_data_dir }} -P -R"
    when: not dbcluster.stat.exists

  - name: start postgresql service (standby)
    service:
      name: "postgresql-{{ PGSQL_VERSION }}"
      state: started
      enabled: no
    when: not dbcluster.stat.exists

  when: pgsql_replication_master is defined and inventory_hostname != pgsql_replication_master

- block:
  - name: stop postgresql service
    service:
      name: "postgresql-{{ PGSQL_VERSION }}"
      state: stopped
      enabled: no

  - include_tasks: pacemaker.yml

  when: pgsql_replication_master is defined and pgsql_pacemaker_cluster_info.master.virtual_ipaddr is defined
