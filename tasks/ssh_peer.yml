---
- name: set postgres home directory as facts
  set_fact:
    postgres_home_dir: "/var/lib/pgsql"

- name: set postgres identity file as facts
  set_fact:
    postgres_identity_file: '{{ postgres_home_dir }}/.ssh/id_rsa'

- block:
  - name: generate ssh key pair
    become: yes
    become_user: postgres
    command: ssh-keygen -f {{ postgres_identity_file }} -q -N ""
    args:
      creates: '{{ postgres_identity_file }}'

  - name: regist ssh private key
    slurp: src={{ postgres_identity_file }}
    register: ssh_private_key

  - name: regist ssh public key
    slurp: src={{ postgres_identity_file }}.pub
    register: ssh_public_key

  when: inventory_hostname == pgsql_replication_master

- block:
  - name: create dot ssh directory
    file:
      path: "{{ postgres_home_dir }}/.ssh"
      state: directory
      owner: postgres
      group: postgres
      mode: '0700'

  - name: detect ssh private key
    stat:
      path: '{{ postgres_identity_file }}'
    register: identity_file

  - name: copy ssh privete key
    lineinfile:
      path: '{{ postgres_identity_file }}'
      create: yes
      line: '{{ hostvars[pgsql_replication_master]["ssh_private_key"]["content"] | b64decode }}'
      insertafter: EOF
      owner: postgres
      group: postgres
      mode: '0600'
    when: not identity_file.stat.exists

  when: inventory_hostname != pgsql_replication_master

- name: add ssh public key
  authorized_key:
    user: postgres
    key: '{{ hostvars[pgsql_replication_master]["ssh_public_key"]["content"] | b64decode }}'

- name: set ssh config (StrictHostKeyChecking no)
  blockinfile:
    path: "{{ postgres_home_dir }}/.ssh/config"
    create: yes
    backup: yes
    owner: postgres
    group: postgres
    mode: 0600
    block: |
      StrictHostKeyChecking no
